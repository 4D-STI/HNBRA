# version: '3.9'
services:
  frontend-dev:
    container_name: fe
    build: ./frontend
    ports:
      - 3000:3000 # atenção porta healthcheck
    working_dir: /frontend
    volumes:
      - ./frontend/app:/frontend/app
    depends_on:
      - be
    environment:
      - NODE_ENV=development
    # command: npm run dev
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3000"]  # Caso utilize outra porta interna para o front, altere ela aqui também
      timeout: 10s
      retries: 5

    backend-dev:
      container_name: be
      build: ./backend
      ports:
        - 3001:3001 # atenção porta healthcheck
      working_dir: /backend
      volumes:
        - ./backend/app:/backend/app
      depends_on:
        - db
      environment:
        - NODE_ENV=development
      # command: npm run dev
      healthcheck:
        test: ["CMD", "lsof", "-t", "-i:3001"]  # Caso utilize outra porta interna para o front, altere ela aqui também
        timeout: 10s
        retries: 5
  
  # app-prod:
  #   container_name: app-prod
  #   build: ./frontend
  #   image: production
  #   # volumes:
  #   #   - ./frontend:/app
  #   ports:
  #     - 3001:3001
  #   depends_on:
  #     - app-dev
  #   environment:
  #     - NODE_ENV=production
  #   # command: npm start
  #   healthcheck:
  #     test: ["CMD", "lsof", "-t", "-i:3001"]  # Caso utilize outra porta interna para o front, altere ela aqui também
  #     timeout: 10s
  #     retries: 5
  
  db:
    container_name: db
    image: postgres:17
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      tty: true
      stdin_open: true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PGADMIN_DEFAULT_EMAIL=hnbra@hnbra.com
      - PGADMIN_DEFAULT_PASSWORD=postgres